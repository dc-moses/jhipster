pipeline {
  agent any

  environment {
    VERSION = '1.0'
    BRANCH = 'main'
    BLACKDUCK_ACCESS_TOKEN = credentials('BlackDuck2-AuthToken')
    CODEDX_ACCESS_TOKEN = credentials('CODEDX_API_KEY2')
    GITHUB_TOKEN = credentials('github-token')
    SEEKER_TOKEN = credentials('SEEKER2_TOKEN')
    SERVER_START = "java -javaagent:seeker/seeker-agent.jar -jar target/jhipster-sample-application-0.0.1-SNAPSHOT.jar"
    SERVER_STRING = "Application 'jhipsterSampleApplication' is running!"
    SERVER_WORKINGDIR = ""
    SEEKER_RUN_TIME = 180
    SEEKER_PROJECT_KEY = 'jhip'
    CONNECT = 'https://poc295.coverity.synopsys.com'
    PROJECT = 'Jhipster'
    STREAM = 'Jhipster'
  }

  stages{
    stage('NPM Install') {
      steps {
        sh 'npm install'
      }
    }

    stage('Build') {
      steps {
        sh 'mvn clean package -DskipTests'
      }
    }
    stage('Set Up Environment') {
      steps {
        sh '''
          curl -s -L https://raw.githubusercontent.com/dc-moses/io-scripts/main/getProjectID.sh > /tmp/getProjectID.sh
          curl -s -L https://raw.githubusercontent.com/dc-moses/io-scripts/main/serverStart.sh > /tmp/serverStart.sh
          curl -s -L https://raw.githubusercontent.com/dc-moses/io-scripts/main/isNumeric.sh > /tmp/isNumeric.sh

          chmod +x /tmp/getProjectID.sh
          chmod +x /tmp/serverStart.sh
          chmod +x /tmp/isNumeric.sh
        '''
      }
    }
    stage('SAST - Coverity') {
      steps {
        withCoverityEnvironment(coverityInstanceUrl: "$CONNECT", projectName: "$PROJECT", streamName: "$STREAM") {
           sh '''
             cov-build --dir idir mvn -B clean package -DskipTests
             cov-analyze --dir idir --strip-path $WORKSPACE --webapp-security
             cov-commit-defects --dir idir --url $COV_URL --stream $COV_STREAM --scm git
        '''
        }
      }
    }
    stage ('SCA - Black Duck') {
      steps {
        sh '''
          echo "Running BlackDuck"
          rm -fr /tmp/detect7.sh
          curl -s -L https://detect.synopsys.com/detect7.sh > /tmp/detect7.sh
          bash /tmp/detect7.sh --blackduck.url="https://poc295.blackduck.synopsys.com" --blackduck.api.token="${BLACKDUCK_ACCESS_TOKEN}" --detect.project.name="${PROJECT}" --detect.project.version.name="${VERSION}" --blackduck.trust.cert=true
          # --detect.blackduck.scan.mode=FULL
        '''
      }
    }
    stage ('IAST - Seeker (Functional Testing Step)') {
      steps {
        sh '''#!/bin/bash
          if [ ! -z ${SERVER_WORKINGDIR} ]; then cd ${SERVER_WORKINGDIR}; fi

          sh -c "$( curl -k -X GET -fsSL --header 'Accept: application/x-sh' \"${SEEKER_SERVER_URL}/rest/api/latest/installers/agents/scripts/JAVA?osFamily=LINUX&downloadWith=curl&projectKey=${SEEKER_PROJECT_KEY}&webServer=TOMCAT&flavor=DEFAULT&agentName=&accessToken=\")"

          export SEEKER_PROJECT_VERSION=${VERSION}
          export SEEKER_AGENT_NAME=${AGENT}
          export MAVEN_OPTS=-javaagent:seeker/seeker-agent.jar

          serverMessage=$(/tmp/serverStart.sh --startCmd="${SERVER_START}" --startedString="${SERVER_STRING}" --project="${PROJECT}" --timeout="60s" &)
          if [[ $serverMessage == ?(-)+([0-9]) ]]; then #Check if value passed back is numeric (PID) or string (Error message).
            echo "Running IAST Tests"

            testRunID=$(curl -X 'POST' "${SEEKER_SERVER_URL}/rest/api/latest/testruns" -H 'accept: application/json' -H 'Content-Type: application/x-www-form-urlencoded' -H "Authorization: ${SEEKER_TOKEN}" -d "type=AUTO_TRIAGE&statusKey=FIXED&projectKey=${SEEKER_PROJECT_KEY}" | jq -r ".[]".key)
            echo "Run ID is : "$testRunID

            selenium-side-runner -c "browserName=firefox moz:firefoxOptions.args=[-headless]" --output-directory=/tmp ${WORKSPACE}/selenium/jHipster.side

            # Give Seeker some time to do it's stuff; API collation, testing etc.
            sleep ${SEEKER_RUN_TIME}

            testResponse=$(curl -X 'PUT' "${SEEKER_SERVER_URL}/rest/api/latest/testruns/$testRunID/close" -H 'accept: application/json' -H 'Content-Type: application/x-www-form-urlencoded' -H "Authorization: ${SEEKER_TOKEN}" -d 'completed=true')
            echo "Finished Testing. [$testResponse]"

            kill $serverMessage
          else
            echo $serverMessage
            return 1
          fi
        '''
      }
    }
    stage ('Code DX - Analysis') {
      steps {
        sh '''
          curl -X 'POST' \
            'https://demo.codedx.synopsys.com/codedx/api/projects/112%3Bbranch%3Dmain/analysis' \
            -H 'accept: */*' \
            -H 'Content-Type: multipart/form-data' \
            -H "API-Key: ${CODEDX_ACCESS_TOKEN}" \
            -F 'filenames=' \
            -F 'includeGitSource=true' \
            -F 'gitBranchName=master' \
            -F 'branchName='5
        '''
      }
    }
    stage('Clean Workspace') {
      steps {
        cleanWs()
      }
    }
  }
}
